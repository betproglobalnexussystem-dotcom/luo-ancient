generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  password         String
  name             String?
  isAdmin          Boolean            @default(false)
  createdAt        DateTime           @default(now())
  watchlist        Watchlist[]
  watchHistory     WatchHistory[]
  continueWatching ContinueWatching[]
  subscription     Subscription?
  ratings          Rating[]
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  releaseDate DateTime?
  genreId     Int
  genre       Genre     @relation(fields: [genreId], references: [id])
  seriesId    Int?
  series      Series?   @relation(fields: [seriesId], references: [id])
  ratings     Rating[]
  watchHistory WatchHistory[]
  watchlist   Watchlist[]
  continueWatching ContinueWatching[]
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[]
}

model Series {
  id      Int     @id @default(autoincrement())
  title   String
  movies  Movie[]
}

model Watchlist {
  id      Int   @id @default(autoincrement())
  userId  Int
  movieId Int
  user    User  @relation(fields: [userId], references: [id])
  movie   Movie @relation(fields: [movieId], references: [id])
}

model WatchHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  movieId   Int
  watchedAt DateTime @default(now())
  progress  Float    @default(0)
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
}

model ContinueWatching {
  id        Int      @id @default(autoincrement())
  userId    Int
  movieId   Int
  progress  Float    @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  plan      String
  startDate DateTime @default(now())
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Rating {
  id      Int   @id @default(autoincrement())
  userId  Int
  movieId Int
  score   Int
  user    User  @relation(fields: [userId], references: [id])
  movie   Movie @relation(fields: [movieId], references: [id])
}

model Update {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
}
